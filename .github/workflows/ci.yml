name: Generate-iGOT-build

on:
  workflow_dispatch:
    inputs:
      flavor:
        description: 'Build flavor/environment'
        required: true
        default: 'qa'
        type: choice
        options:
          - qa
          - uat
          - prod
      release_notes:
        description: 'Release notes for this build'
        required: false
        default: 'Build from GitHub Actions'
        type: string
      runner_type:
        description: 'Runner type'
        required: true
        default: 'self-hosted'
        type: choice
        options:
          - self-hosted
          - github-hosted

env:
  FLUTTER_VERSION: "3.27.1"
  FLUTTER_PATH_SELF_HOSTED: "/home/shankarganeshi/Software/flutter_3.27.1/bin"
  RUNNER_NAME_SELF_HOSTED: "TI-LAP-949"
  RUNNER_NAME_GITHUB: "GitHub Runner"

jobs:
  build:
    name: Build & Deploy iGOT App
    runs-on: ${{ github.event.inputs.runner_type == 'self-hosted' && 'self-hosted' || 'ubuntu-latest' }}
    timeout-minutes: 40
    
    steps:
      # =================
      # SETUP & CHECKOUT
      # =================
      - name: 📊 Record build start time
        id: start_time
        run: |
          echo "start_timestamp=$(date +%s)" >> $GITHUB_OUTPUT
          echo "Build started at: $(date '+%Y-%m-%d %H:%M:%S UTC')"
          echo "Runner type: ${{ github.event.inputs.runner_type }}"

      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          clean: true

      # =================
      # FLUTTER SETUP (CONDITIONAL)
      # =================
      - name: 🔧 Setup Flutter (Self-hosted)
        if: github.event.inputs.runner_type == 'self-hosted'
        run: |
          echo "=== Setting up Flutter for self-hosted runner ==="
          export PATH="${{ env.FLUTTER_PATH_SELF_HOSTED }}:$PATH"
          echo "PATH=${{ env.FLUTTER_PATH_SELF_HOSTED }}:$PATH" >> $GITHUB_ENV
          echo "RUNNER_NAME=${{ env.RUNNER_NAME_SELF_HOSTED }}" >> $GITHUB_ENV
          flutter --version
          echo "✅ Self-hosted Flutter setup completed"

      - name: 🔧 Setup Flutter (GitHub-hosted)
        if: github.event.inputs.runner_type == 'github-hosted'
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: stable
          cache: true

      - name: 🔧 Set GitHub runner name
        if: github.event.inputs.runner_type == 'github-hosted'
        run: |
          echo "RUNNER_NAME=${{ env.RUNNER_NAME_GITHUB }}" >> $GITHUB_ENV

      - name: ✅ Verify Flutter installation
        run: |
          echo "=== Verifying Flutter installation ==="
          flutter --version
          flutter doctor --verbose
          echo "✅ Flutter verification completed"

      # =================
      #  APP CONSTANTS UPDATE
      # =================
      - name: 🛠️ Update app constants 
        run: |
          echo "=== Updating app constants for ${{ github.event.inputs.flavor }} ==="
          
          APP_CONSTANTS_FILE="lib/constants/_constants/app_constants.dart"
          
          if [ ! -f "$APP_CONSTANTS_FILE" ]; then
            echo "❌ ERROR: $APP_CONSTANTS_FILE not found"
            echo "Available files in lib/constants/_constants/:"
            ls -la lib/constants/_constants/ || echo "Directory not found"
            exit 1
          fi
          
          echo "📄 Original file content:"
          echo "--- START OF FILE ---"
          cat "$APP_CONSTANTS_FILE"
          echo "--- END OF FILE ---"
          
          # Backup original file
          cp "$APP_CONSTANTS_FILE" "${APP_CONSTANTS_FILE}.backup"
          
          # Update APP_ENVIRONMENT based on selected flavor
          case "${{ github.event.inputs.flavor }}" in
            "qa")
              echo "🧪 Setting environment to QA..."
              sed -i 's/const String APP_ENVIRONMENT = Environment\.[^;]*/const String APP_ENVIRONMENT = Environment.qa/' "$APP_CONSTANTS_FILE"
              ;;
            "uat")
              echo "🔄 Setting environment to UAT..."
              sed -i 's/const String APP_ENVIRONMENT = Environment\.[^;]*/const String APP_ENVIRONMENT = Environment.uat/' "$APP_CONSTANTS_FILE"
              ;;
            "prod")
              echo "🚀 Setting environment to PROD..."
              # Fixed regex - the original had an issue
              sed -i 's/const String APP_ENVIRONMENT = Environment\.[^;]*/const String APP_ENVIRONMENT = Environment.prod/' "$APP_CONSTANTS_FILE"
              ;;
          esac
          
          echo "📝 Updated file content:"
          echo "--- START OF UPDATED FILE ---"
          cat "$APP_CONSTANTS_FILE"
          echo "--- END OF UPDATED FILE ---"
          
          # Verify the change was made
          if grep -q "Environment\.${{ github.event.inputs.flavor }}" "$APP_CONSTANTS_FILE"; then
            echo "✅ App constants updated successfully for ${{ github.event.inputs.flavor }}"
          else
            echo "❌ ERROR: Failed to update app constants"
            echo "Expected to find: Environment.${{ github.event.inputs.flavor }}"
            echo "Restoring backup..."
            cp "${APP_CONSTANTS_FILE}.backup" "$APP_CONSTANTS_FILE"
            exit 1
          fi

      # =================
      # ENVIRONMENT SETUP
      # =================
      - name: 🌍 Create environment file
        run: |
          echo "=== Creating .env file for ${{ github.event.inputs.flavor }} ==="
          
          case "${{ github.event.inputs.flavor }}" in
            "qa")
              if [ -z "${{ secrets.QA_ENV }}" ]; then
                echo "❌ ERROR: QA_ENV secret is empty or not set"
                echo "Available environment variables starting with 'QA':"
                env | grep -i qa || echo "None found"
                exit 1
              fi
              echo "${{ secrets.QA_ENV }}" > .env.qa
              cp .env.qa .env
              echo "✅ QA environment configured"
              ;;
            "uat")
              if [ -z "${{ secrets.UAT_ENV }}" ]; then
                echo "❌ ERROR: UAT_ENV secret is empty or not set"
                echo "Available environment variables starting with 'UAT':"
                env | grep -i uat || echo "None found"
                exit 1
              fi
              echo "${{ secrets.UAT_ENV }}" > .env.uat
              cp .env.uat .env
              echo "✅ UAT environment configured"
              ;;
            "prod")
              if [ -z "${{ secrets.PROD_ENV }}" ]; then
                echo "❌ ERROR: PROD_ENV secret is empty or not set"
                echo "Debugging PROD_ENV secret..."
                echo "Secret length: $(echo '${{ secrets.PROD_ENV }}' | wc -c)"
                echo "First 50 characters: $(echo '${{ secrets.PROD_ENV }}' | head -c 50)"
                echo "Available environment variables starting with 'PROD':"
                env | grep -i prod || echo "None found"
                exit 1
              fi
              echo "${{ secrets.PROD_ENV }}" > .env.prod
              cp .env.prod .env
              echo "✅ PROD environment configured"
              ;;
          esac
          
          echo "Environment: ${{ github.event.inputs.flavor }}"
          echo "File size: $(wc -c < .env) bytes"
          echo "File line count: $(wc -l < .env) lines"
          
          # Show first few lines of env file (without sensitive data)
          echo "First 3 lines of .env file (for debugging):"
          head -3 .env | sed 's/=.*/=***HIDDEN***/'
     
      # =================
      # FLUTTER BUILD PREP
      # =================
      - name: 📦 Generate environment files
        run: |
          echo "=== Generating env.dart ==="
          
          flutter pub get
          flutter pub run build_runner build --delete-conflicting-outputs
          echo "✅ env.dart generation completed"

      - name: 🔑 Setup Android keystore
        run: |
          echo "=== Setting up Android keystore ==="
          mkdir -p android/app
          
          # Decode keystore from separate secret
          if [ -z "${{ secrets.KEY_STORE }}" ]; then
            echo "❌ ERROR: KEY_STORE secret is empty or not set"
            exit 1
          fi
          echo "${{ secrets.KEY_STORE }}" | base64 --decode > android/app/upload-keystore.jks
          echo "✅ Keystore file created"
          
          # Parse keystore properties from combined secret
          if [ -z "${{ secrets.ANDROID_KEYSTORE_PROPERTIES }}" ]; then
            echo "❌ ERROR: ANDROID_KEYSTORE_PROPERTIES secret is empty or not set"
            exit 1
          fi
          
          echo "${{ secrets.ANDROID_KEYSTORE_PROPERTIES }}" > keystore-props.env
          source keystore-props.env
          
          # Validate required properties
          if [ -z "$KEYSTORE_PASSWORD" ] || [ -z "$KEY_PASSWORD" ] || [ -z "$KEY_ALIAS" ]; then
            echo "❌ ERROR: Missing required keystore properties"
            echo "Required: KEYSTORE_PASSWORD, KEY_PASSWORD, KEY_ALIAS"
            echo "Current properties file content:"
            cat keystore-props.env
            exit 1
          fi
          
          # Create key.properties file
          cat > android/key.properties << EOF
          storePassword=$KEYSTORE_PASSWORD
          keyPassword=$KEY_PASSWORD
          keyAlias=$KEY_ALIAS
          storeFile=upload-keystore.jks
          EOF
          
          # Cleanup temporary file
          rm -f keystore-props.env
          
          echo "✅ Keystore setup completed"
          echo "   - Keystore file: android/app/upload-keystore.jks"
          echo "   - Properties file: android/key.properties"
          echo "   - Key alias: $KEY_ALIAS"
          
          # Verify files exist
          if [ -f "android/app/upload-keystore.jks" ] && [ -f "android/key.properties" ]; then
            echo "✅ All keystore files created successfully"
          else
            echo "❌ ERROR: Failed to create keystore files"
            ls -la android/app/
            ls -la android/
            exit 1
          fi


      # =================
      # BUILD PROCESS
      # =================
      - name: 🏗️ Build Android APK
        run: |
          echo "=== Building Android APK for ${{ github.event.inputs.flavor }} ==="
          echo "Runner: ${{ github.event.inputs.runner_type }}"
          
          flutter build apk \
            --flavor ${{ github.event.inputs.flavor }} \
            --obfuscate \
            --split-debug-info=build/debug-info/${{ github.event.inputs.flavor }} \
            --release
          
          echo "✅ Android APK build completed"
          echo "Build outputs:"
          ls -la build/app/outputs/flutter-apk/ || echo "⚠️ APK output directory not found"

      # =================
      # FIREBASE CONFIGURATION
      # =================
      - name: 🔥 Setup Firebase configuration
        run: |
          echo "=== Setting up Firebase configuration for ${{ github.event.inputs.flavor }} ==="
          
          case "${{ github.event.inputs.flavor }}" in
            "qa")
              echo "${{ secrets.QA_FIREBASE_CONFIG }}" > firebase-config.env
              ;;
            "uat")
              echo "${{ secrets.UAT_FIREBASE_CONFIG }}" > firebase-config.env
              ;;
            "prod")
              echo "${{ secrets.PROD_FIREBASE_CONFIG }}" > firebase-config.env
              ;;
          esac
          
          # Load Firebase config and set environment variables
          source firebase-config.env
          echo "FIREBASE_ANDROID_APP_ID=$ANDROID_APP_ID" >> $GITHUB_ENV
          echo "FIREBASE_IOS_APP_ID=$IOS_APP_ID" >> $GITHUB_ENV
          echo "FIREBASE_PROJECT_ID=$PROJECT_ID" >> $GITHUB_ENV
          
          echo "✅ Firebase configuration loaded:"
          echo "   Environment: ${{ github.event.inputs.flavor }}"
          echo "   Project ID: $PROJECT_ID"
          echo "   Android App ID: $ANDROID_APP_ID"
    

      # =================
      # FIREBASE SETUP & DISTRIBUTION
      # =================
      - name: 🔥 Setup Firebase service account
        run: |
          echo "=== Setting up Firebase credentials for ${{ github.event.inputs.flavor }} ==="
          
          case "${{ github.event.inputs.flavor }}" in
            "qa")
              if [ -z "${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY_QA }}" ]; then
                echo "ERROR: FIREBASE_SERVICE_ACCOUNT_KEY_QA secret is empty or not set"
                exit 1
              fi
              echo "${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY_QA }}" | base64 --decode > firebase-service-account.json
              echo "✅ QA Firebase service account configured"
              ;;
            "uat")
              if [ -z "${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY_UAT }}" ]; then
                echo "ERROR: FIREBASE_SERVICE_ACCOUNT_KEY_UAT secret is empty or not set"
                exit 1
              fi
              echo "${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY_UAT }}" | base64 --decode > firebase-service-account.json
              echo "✅ UAT Firebase service account configured"
              ;;
            "prod")
              if [ -z "${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY_PROD }}" ]; then
                echo "ERROR: FIREBASE_SERVICE_ACCOUNT_KEY_PROD secret is empty or not set"
                exit 1
              fi
              echo "${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY_PROD }}" | base64 --decode > firebase-service-account.json
              echo "✅ PROD Firebase service account configured"
              ;;
          esac
          
          echo "Firebase service account file created for: ${{ github.event.inputs.flavor }}"

      - name: 🔥 Install Firebase CLI (Self-hosted)
        if: github.event.inputs.runner_type == 'self-hosted'
        run: |
          echo "=== Installing/Checking Firebase CLI on self-hosted runner ==="
          if ! command -v firebase &> /dev/null; then
            echo "Installing Firebase CLI..."
            curl -sL https://firebase.tools | bash
            export PATH="$PATH:$HOME/.local/bin"
            echo "PATH=$PATH:$HOME/.local/bin" >> $GITHUB_ENV
          else
            echo "✅ Firebase CLI already installed"
          fi
          firebase --version

      - name: 🔥 Install Firebase CLI (GitHub-hosted)
        if: github.event.inputs.runner_type == 'github-hosted'
        run: |
          echo "=== Installing Firebase CLI on GitHub-hosted runner ==="
          npm install -g firebase-tools
          firebase --version
          echo "✅ Firebase CLI installed via npm"

      - name: 📝 Prepare release notes
        id: release_notes
        run: |
          echo "=== Preparing release notes ==="
          
          USER_NOTES="${{ github.event.inputs.release_notes }}"
          if [ -z "$USER_NOTES" ] || [ "$USER_NOTES" = "Build from GitHub Actions" ]; then
            USER_NOTES="Standard build from GitHub Actions"
          fi
          
          # Create formatted release notes
          cat > release-notes.txt << EOF
          🚀 iGOT ${{ github.event.inputs.flavor }} Build #${{ github.run_number }}

          📝 Release Notes:
          $USER_NOTES

          🔧 Build Details:
          • Environment: ${{ github.event.inputs.flavor }}
          • Build Number: #${{ github.run_number }}
          • Triggered by: ${{ github.actor }}
          • Branch: ${{ github.ref_name }}
          • Date: $(date '+%Y-%m-%d %H:%M:%S UTC')
          • Runner: ${{ github.event.inputs.runner_type }} (${{ env.RUNNER_NAME }})
          EOF
          
          echo "✅ Release notes prepared"
          echo "User notes: $USER_NOTES"

      - name: 🚀 Distribute to Firebase App Distribution
        run: |
          echo "=== Distributing Android APK to Firebase ==="
          
          export GOOGLE_APPLICATION_CREDENTIALS="firebase-service-account.json"
          APK_PATH="build/app/outputs/flutter-apk/app-${{ github.event.inputs.flavor }}-release.apk"
          
          # Verify APK exists
          if [ ! -f "$APK_PATH" ]; then
            echo "❌ ERROR: Android APK not found at $APK_PATH"
            ls -la build/app/outputs/flutter-apk/
            exit 1
          fi
          
          # Set environment-specific Firebase distribution groups
          case "${{ github.event.inputs.flavor }}" in
            "qa")
              FIREBASE_GROUPS="${{ vars.FIREBASE_QA_GROUPS || 'iGot Dev' }}"
              ;;
            "uat")
              FIREBASE_GROUPS="${{ vars.FIREBASE_UAT_GROUPS || 'iGot Dev' }}"
              ;;
            "prod")
              FIREBASE_GROUPS="${{ vars.FIREBASE_PROD_GROUPS || 'iGot Dev' }}"
              ;;
            *)
              FIREBASE_GROUPS="Dev"
              echo "⚠️ Unknown environment, using default group: Dev"
              ;;
          esac
          
          echo "Uploading: $APK_PATH"
          echo "Environment: ${{ github.event.inputs.flavor }}"
          echo "App ID: ${{ env.FIREBASE_ANDROID_APP_ID }}"
          echo "Project: ${{ env.FIREBASE_PROJECT_ID }}"
          echo "Groups: $FIREBASE_GROUPS"
          echo "Runner: ${{ github.event.inputs.runner_type }}"
          
          # Distribute to Firebase with environment-specific groups
          firebase appdistribution:distribute "$APK_PATH" \
            --app "${{ env.FIREBASE_ANDROID_APP_ID }}" \
            --groups "$FIREBASE_GROUPS" \
            --release-notes-file "release-notes.txt" \
            --debug
          
          echo "✅ Firebase distribution completed for ${{ github.event.inputs.flavor }}!"
          echo "Distributed to groups: $FIREBASE_GROUPS"

      # =================
      # BUILD INFO & NOTIFICATIONS
      # =================
      - name: 📊 Get build information
        id: build_info
        run: |
          APK_PATH="build/app/outputs/flutter-apk/app-${{ github.event.inputs.flavor }}-release.apk"
          
          if [ -f "$APK_PATH" ]; then
            APK_SIZE=$(du -h "$APK_PATH" | cut -f1)
            echo "apk_size=$APK_SIZE" >> $GITHUB_OUTPUT
            echo "apk_path=$APK_PATH" >> $GITHUB_OUTPUT
            echo "build_status=success" >> $GITHUB_OUTPUT
            echo "✅ APK found: $APK_PATH (Size: $APK_SIZE)"
          else
            echo "apk_size=N/A" >> $GITHUB_OUTPUT
            echo "apk_path=N/A" >> $GITHUB_OUTPUT
            echo "build_status=failed" >> $GITHUB_OUTPUT
            echo "❌ APK not found at expected location"
          fi

      - name: 📢 Send Teams notification - Success
        if: success()
        run: |
          echo "=== Sending Teams notification for Success ==="
          
          # Calculate build duration
          START_TIME="${{ steps.start_time.outputs.start_timestamp }}"
          END_TIME=$(date +%s)
          DURATION=$((END_TIME - START_TIME))
          DURATION_MIN=$((DURATION / 60))
          DURATION_SEC=$((DURATION % 60))
          
          # Set environment-specific styling
          case "${{ github.event.inputs.flavor }}" in
            "qa")
              ENV_EMOJI="🧪"
              ENV_COLOR="Good"
              ;;
            "uat")
              ENV_EMOJI="🔄"
              ENV_COLOR="Good"
              ;;
            "prod")
              ENV_EMOJI="🚀"
              ENV_COLOR="Attention"
              ;;
          esac
          
          # Set runner-specific emoji
          if [ "${{ github.event.inputs.runner_type }}" = "self-hosted" ]; then
            RUNNER_EMOJI="🖥️"
          else
            RUNNER_EMOJI="☁️"
          fi
          
          # Prepare display notes (truncate if too long)
          USER_NOTES="${{ github.event.inputs.release_notes }}"
          if [ -z "$USER_NOTES" ] || [ "$USER_NOTES" = "Build from GitHub Actions" ]; then
            USER_NOTES="Standard build from GitHub Actions"
          fi
          DISPLAY_NOTES=$(echo "$USER_NOTES" | cut -c1-100)
          if [ ${#USER_NOTES} -gt 100 ]; then
            DISPLAY_NOTES="$DISPLAY_NOTES..."
          fi
          
          # Escape quotes in display notes for JSON
          DISPLAY_NOTES=$(echo "$DISPLAY_NOTES" | sed 's/"/\\"/g')
          
          # Get current timestamp
          COMPLETED_TIME=$(date '+%Y-%m-%d %H:%M:%S UTC')
          
          # Send Teams notification
          curl -X POST \
            -H "Content-Type: application/json" \
            -d "{
              \"attachments\": [
                {
                  \"contentType\": \"application/vnd.microsoft.card.adaptive\",
                  \"content\": {
                    \"type\": \"AdaptiveCard\",
                    \"version\": \"1.2\",
                    \"body\": [
                      {
                        \"type\": \"TextBlock\",
                        \"text\": \"${ENV_EMOJI} iGOT '${{ github.event.inputs.flavor }}' Build & Firebase Distribution Successful!\",
                        \"weight\": \"Bolder\",
                        \"size\": \"Medium\",
                        \"color\": \"${ENV_COLOR}\"
                      },
                      {
                        \"type\": \"TextBlock\",
                        \"text\": \"📝 Release Notes: ${DISPLAY_NOTES}\",
                        \"wrap\": true,
                        \"spacing\": \"Medium\",
                        \"color\": \"Default\"
                      },
                      {
                        \"type\": \"FactSet\",
                        \"facts\": [
                          {
                            \"title\": \"🏷️ Environment:\",
                            \"value\": \"${{ github.event.inputs.flavor }}\"
                          },
                          {
                            \"title\": \"🔢 Build Number:\",
                            \"value\": \"#${{ github.run_number }}\"
                          },
                          {
                            \"title\": \"📦 APK Size:\",
                            \"value\": \"${{ steps.build_info.outputs.apk_size }}\"
                          },
                          {
                            \"title\": \"⏱️ Build Duration:\",
                            \"value\": \"${DURATION_MIN}m ${DURATION_SEC}s\"
                          },
                          {
                            \"title\": \"👤 Triggered by:\",
                            \"value\": \"${{ github.actor }}\"
                          },
                          {
                            \"title\": \"🌿 Branch:\",
                            \"value\": \"${{ github.ref_name }}\"
                          },
                          {
                            \"title\": \"🕒 Completed:\",
                            \"value\": \"${COMPLETED_TIME}\"
                          },
                          {
                            \"title\": \"${RUNNER_EMOJI} Runner:\",
                            \"value\": \"${{ github.event.inputs.runner_type }} (${{ env.RUNNER_NAME }})\"
                          }
                        ]
                      }
                    ],
                    \"actions\": [
                      {
                        \"type\": \"Action.OpenUrl\",
                        \"title\": \"📱 Download from Firebase\",
                        \"url\": \"https://appdistribution.firebase.dev/i/${{ env.FIREBASE_ANDROID_APP_ID }}\"
                      },
                      {
                        \"type\": \"Action.OpenUrl\",
                        \"title\": \"📋 View Build Logs\",
                        \"url\": \"${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\"
                      },
                      {
                        \"type\": \"Action.OpenUrl\",
                        \"title\": \"📦 GitHub Artifacts\",
                        \"url\": \"${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\"
                      }
                    ]
                  }
                }
              ]
            }" \
            "${{ secrets.POWER_AUTOMATE_WEBHOOK_URL }}"
          
          echo "✅ Teams notification sent successfully!"

      - name: 📢 Send Teams notification - Failure
        if: failure()
        run: |
          echo "=== Sending Teams notification for Failure ==="
          
          # Set runner-specific emoji
          if [ "${{ github.event.inputs.runner_type }}" = "self-hosted" ]; then
            RUNNER_EMOJI="🖥️"
          else
            RUNNER_EMOJI="☁️"
          fi
          
          # Get current timestamp
          FAILED_TIME=$(date '+%Y-%m-%d %H:%M:%S UTC')
          
          curl -X POST \
            -H "Content-Type: application/json" \
            -d "{
              \"attachments\": [
                {
                  \"contentType\": \"application/vnd.microsoft.card.adaptive\",
                  \"content\": {
                    \"type\": \"AdaptiveCard\",
                    \"version\": \"1.2\",
                    \"body\": [
                      {
                        \"type\": \"TextBlock\",
                        \"text\": \"❌ iGOT '${{ github.event.inputs.flavor }}' Build Failed!\",
                        \"weight\": \"Bolder\",
                        \"size\": \"Medium\",
                        \"color\": \"Attention\"
                      },
                      {
                        \"type\": \"FactSet\",
                        \"facts\": [
                          {
                            \"title\": \"🏷️ Environment:\",
                            \"value\": \"${{ github.event.inputs.flavor }}\"
                          },
                          {
                            \"title\": \"🔢 Build Number:\",
                            \"value\": \"#${{ github.run_number }}\"
                          },
                          {
                            \"title\": \"👤 Triggered by:\",
                            \"value\": \"${{ github.actor }}\"
                          },
                          {
                            \"title\": \"🌿 Branch:\",
                            \"value\": \"${{ github.ref_name }}\"
                          },
                          {
                            \"title\": \"🕒 Failed at:\",
                            \"value\": \"${FAILED_TIME}\"
                          },
                          {
                            \"title\": \"${RUNNER_EMOJI} Runner:\",
                            \"value\": \"${{ github.event.inputs.runner_type }} (${{ env.RUNNER_NAME }})\"
                          }
                        ]
                      }
                    ],
                    \"actions\": [
                      {
                        \"type\": \"Action.OpenUrl\",
                        \"title\": \"🔍 View Error Logs\",
                        \"url\": \"${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\"
                      }
                    ]
                  }
                }
              ]
            }" \
            "${{ secrets.POWER_AUTOMATE_WEBHOOK_URL }}"
          
          echo "❌ Failure notification sent"
      # =================
      # ARTIFACTS & CLEANUP
      # =================
      - name: 📦 Upload build artifacts
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: flutter-build-artifacts-${{ github.event.inputs.flavor }}-${{ github.event.inputs.runner_type }}-${{ github.run_number }}
          path: |
            build/app/outputs/flutter-apk/app-${{ github.event.inputs.flavor }}-release.apk
            build/debug-info/${{ github.event.inputs.flavor }}
            release-notes.txt
          retention-days: 10

      - name: 🧹 Cleanup sensitive files
        if: always()
        run: |
          echo "=== Cleaning up sensitive files ==="
          rm -f firebase-service-account.json
          rm -f android/key.properties
          rm -f firebase-config.env
          rm -f release-notes.txt
          echo "✅ Cleanup completed"