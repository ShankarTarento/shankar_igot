name: generate-iGOT-build
on:
  workflow_dispatch:

jobs:
  build:
    runs-on: self-hosted
    strategy:
      matrix:
        flavor: [qa]

    steps:
      - name: Debug initial environment
        run: |
          echo "=== Initial Debug ==="
          echo "Current directory: $(pwd)"
          echo "User: $(whoami)"
          echo "Home: $HOME"
          echo "Workspace: $GITHUB_WORKSPACE"
          echo "Contents:"
          ls -la
          echo "===================="

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          clean: true

      - name: Debug after checkout
        run: |
          echo "=== After Checkout Debug ==="
          echo "Current directory: $(pwd)"
          echo "Contents:"
          ls -la
          echo "Git status:"
          git status || echo "Not a git repository"
          echo "=========================="

      - name: Setup Flutter PATH
        run: |
          echo "=== Setting up Flutter ==="
          echo "Current PATH: $PATH"
          echo "Flutter location check:"
          ls -la /home/shankarganeshi/Software/flutter_3.27.1/bin/flutter || echo "Flutter binary not found"
          
          export PATH="/home/shankarganeshi/Software/flutter_3.27.1/bin:$PATH"
          echo "PATH=/home/shankarganeshi/Software/flutter_3.27.1/bin:$PATH" >> $GITHUB_ENV
          
          echo "Testing Flutter command:"
          /home/shankarganeshi/Software/flutter_3.27.1/bin/flutter --version || echo "Flutter command failed"
          echo "========================"

      - name: Verify Flutter setup
        run: |
          echo "=== Flutter Verification ==="
          echo "Current PATH: $PATH"
          echo "Which flutter: $(which flutter || echo 'flutter not in PATH')"
          flutter --version || echo "Flutter command not working"
          echo "========================="

      - name: Create .env file for ${{ matrix.flavor }}
        run: |
          echo "=== Creating .env file ==="
          echo "Working directory: $(pwd)"
          echo "Creating .env file for flavor: ${{ matrix.flavor }}..."
          
          if [ "${{ matrix.flavor }}" = "qa" ]; then
            echo "Processing QA secrets..."
            if [ -z "${{ secrets.QA_ENV }}" ]; then
              echo "WARNING: QA_ENV secret is empty or not set"
            else
              echo "${{ secrets.QA_ENV }}" > .env.qa
              cp .env.qa .env
              echo ".env.qa created successfully"
              echo "File size: $(wc -c < .env.qa) bytes"
            fi
          elif [ "${{ matrix.flavor }}" = "uat" ]; then
            echo "${{ secrets.UAT_ENV_FILE }}" > .env.uat
            cp .env.uat .env
          else
            echo "${{ secrets.PROD_ENV_FILE }}" > .env.prod
            cp .env.prod .env
          fi
          
          echo ".env file creation completed."
          echo "Files created:"
          ls -la .env* || echo "No .env files found"

      - name: Generate env.dart for ${{ matrix.flavor }}
        run: |
          echo "=== Generating env.dart ==="
          echo "Current directory: $(pwd)"
          echo "Getting Flutter dependencies..."
          flutter pub get
          echo "Running build_runner..."
          flutter pub run build_runner build --delete-conflicting-outputs
          echo "env.dart generation completed."

      - name: Set up release keystore
        run: |
          echo "=== Setting up keystore ==="
          echo "Creating android/app directory..."
          mkdir -p android/app
          echo "Decoding keystore..."
          echo "${{ secrets.KEY_STORE }}" | base64 --decode > android/app/upload-keystore.jks
          echo "Keystore setup completed:"
          ls -l android/app/

      - name: Create key.properties for signing
        run: |
          echo "=== Creating key.properties ==="
          echo "Creating key.properties file..."
          echo "storePassword=${{ secrets.KEYSTORE_PASSWORD }}" > android/key.properties
          echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> android/key.properties
          echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> android/key.properties
          echo "storeFile=upload-keystore.jks" >> android/key.properties
          echo "key.properties created successfully"

      - name: Build APK for ${{ matrix.flavor }}
        run: |
          echo "=== Building APK ==="
          echo "Current directory: $(pwd)"
          echo "Building APK for flavor: ${{ matrix.flavor }}"
          flutter build apk --flavor ${{ matrix.flavor }} --obfuscate --split-debug-info=build/debug-info/${{ matrix.flavor }} --release
          echo "APK build completed"
          echo "Build outputs:"
          ls -la build/app/outputs/flutter-apk/ || echo "APK output directory not found"

      # Get APK Info for notification
      - name: Get APK Info
        id: apk_info
        run: |
          APK_PATH="build/app/outputs/flutter-apk/app-${{ matrix.flavor }}-release.apk"
          if [ -f "$APK_PATH" ]; then
            APK_SIZE=$(du -h "$APK_PATH" | cut -f1)
            echo "apk_size=$APK_SIZE" >> $GITHUB_OUTPUT
            echo "apk_path=$APK_PATH" >> $GITHUB_OUTPUT
            echo "build_status=success" >> $GITHUB_OUTPUT
            echo "✅ APK found: $APK_PATH (Size: $APK_SIZE)"
          else
            echo "apk_size=N/A" >> $GITHUB_OUTPUT
            echo "apk_path=N/A" >> $GITHUB_OUTPUT
            echo "build_status=failed" >> $GITHUB_OUTPUT
            echo "❌ APK not found at expected location"
          fi

      # Trigger Power Automate Flow - Build Success
      - name: Trigger Teams Notification via Power Automate - Success
        if: success()
        run: |
          echo "=== Triggering Power Automate Flow for Success ==="
          
          # Prepare the payload with build information (Firebase references removed)
          PAYLOAD=$(cat <<EOF
          {
            "buildStatus": "SUCCESS",
            "buildNumber": "${{ github.run_number }}",
            "flavor": "${{ matrix.flavor }}",
            "apkSize": "${{ steps.apk_info.outputs.apk_size }}",
            "buildTime": "$(date '+%Y-%m-%d %H:%M:%S UTC')",
            "triggeredBy": "${{ github.actor }}",
            "branch": "${{ github.ref_name }}",
            "commitSha": "${{ github.sha }}",
            "repositoryName": "${{ github.repository }}",
            "buildLogsUrl": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
            "artifactDownloadUrl": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
            "workflowName": "${{ github.workflow }}",
            "apkPath": "${{ steps.apk_info.outputs.apk_path }}",
            "runnerName": "TI-LAP-949",
            "buildDuration": "$(echo $(($(date +%s) - $(date -d '${{ github.event.head_commit.timestamp || github.run_started_at }}' +%s)))) seconds"
          }
          EOF
          )
          
          echo "Payload to send:"
          echo "$PAYLOAD" | jq . || echo "$PAYLOAD"
          
          # Send to Power Automate
          RESPONSE=$(curl -s -w "HTTP_STATUS:%{http_code}" \
            -H "Content-Type: application/json" \
            -d "$PAYLOAD" \
            "${{ secrets.POWER_AUTOMATE_WEBHOOK_URL }}")
          
          HTTP_STATUS=$(echo $RESPONSE | tr -d '\n' | sed -e 's/.*HTTP_STATUS://')
          RESPONSE_BODY=$(echo $RESPONSE | sed -e 's/HTTP_STATUS:.*//')
          
          if [ "$HTTP_STATUS" -eq 200 ] || [ "$HTTP_STATUS" -eq 202 ] || [ "$HTTP_STATUS" -eq 204 ]; then
            echo "✅ Power Automate flow triggered successfully (Status: $HTTP_STATUS)"
            echo "Response: $RESPONSE_BODY"
          else
            echo "⚠️ Power Automate flow trigger failed (Status: $HTTP_STATUS)"
            echo "Response: $RESPONSE_BODY"
            echo "Full response: $RESPONSE"
          fi

      # Trigger Power Automate Flow - Build Failed
      - name: Trigger Teams Notification via Power Automate - Failure
        if: failure()
        run: |
          echo "=== Triggering Power Automate Flow for Failure ==="
          
          # Prepare the payload for failed build (Firebase references removed)
          PAYLOAD=$(cat <<EOF
          {
            "buildStatus": "FAILED",
            "buildNumber": "${{ github.run_number }}",
            "flavor": "${{ matrix.flavor }}",
            "apkSize": "N/A",
            "buildTime": "$(date '+%Y-%m-%d %H:%M:%S UTC')",
            "triggeredBy": "${{ github.actor }}",
            "branch": "${{ github.ref_name }}",
            "commitSha": "${{ github.sha }}",
            "repositoryName": "${{ github.repository }}",
            "buildLogsUrl": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
            "artifactDownloadUrl": "N/A",
            "workflowName": "${{ github.workflow }}",
            "errorMessage": "Build failed. Check logs for details.",
            "apkPath": "N/A",
            "runnerName": "TI-LAP-949"
          }
          EOF
          )
          
          echo "Failure payload to send:"
          echo "$PAYLOAD" | jq . || echo "$PAYLOAD"
          
          # Send to Power Automate
          RESPONSE=$(curl -s -w "HTTP_STATUS:%{http_code}" \
            -H "Content-Type: application/json" \
            -d "$PAYLOAD" \
            "${{ secrets.POWER_AUTOMATE_WEBHOOK_URL }}")
          
          HTTP_STATUS=$(echo $RESPONSE | tr -d '\n' | sed -e 's/.*HTTP_STATUS://')
          
          echo "Failure notification sent (Status: $HTTP_STATUS)"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: flutter-build-artifacts-${{ matrix.flavor }}-${{ github.run_number }}
          path: |
            build/app/outputs/flutter-apk/app-${{ matrix.flavor }}-release.apk
            build/debug-info/${{ matrix.flavor }}
        if: success()

      - name: Cleanup sensitive files
        run: |
          echo "=== Cleaning up ==="
          rm -f android/key.properties
          echo "Cleanup completed"
        if: always()