name: Generate iGOT build
on:
  workflow_dispatch:
  # push:
  #   branches:
  #     - main

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        flavor: [qa]

    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up Flutter
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.27.1' 

      - name: Install Java 17
        run: |
          sudo apt-get update
          sudo apt-get install -y openjdk-17-jdk
          export JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64
          export PATH=$JAVA_HOME/bin:$PATH
          java -version   

      # Step 3: Create .env file from Base64 secret
      - name: Create .env file for ${{ matrix.flavor }}
        run: |
          echo "Creating .env file for flavor: ${{ matrix.flavor }}..."
          if [ "${{ matrix.flavor }}" = "qa" ]; then
            echo "${{ secrets.QA_ENV }}" > .env.qa
            cp .env.qa .env
            echo ".env.qa created safely with URLs:"
            grep -E 'https?://' .env.qa || echo "No URLs found"
          elif [ "${{ matrix.flavor }}" = "uat" ]; then
            echo "${{ secrets.UAT_ENV_FILE }}" > .env.uat
            cp .env.uat .env
          else
            echo "${{ secrets.PROD_ENV_FILE }}" > .env.prod
            cp .env.prod .env
          fi
          echo ".env file created."


      # Step 4: Verify .env file (safe, only prints URLs)
      - name: Verify .env file contents
        run: |
          echo "File info:"
          ls -lh .env.${{ matrix.flavor }}
          echo "Line count:"
          wc -l .env.${{ matrix.flavor }}
          echo "Non-secret lines (URLs only):"
          grep -E 'https?://' .env.${{ matrix.flavor }} || echo "No URLs found"

      # Step 4: Verify .env file (safe, only prints URLs)
      - name: Generate env.dart for ${{ matrix.flavor }}
        run: |
          echo "Generating env.dart..."
          flutter pub run build_runner build --delete-conflicting-outputs
          echo "env.dart generated."

      # Step 5: Decode keystore from secret
      - name: Set up release keystore
        run: |
          echo "Decoding keystore from secret..."
          echo "$KEYSTORE_BASE64" | base64 --decode > android/app/upload-keystore.jks
          ls -l android/app/
        env:
          KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}

      # Step 6: Create key.properties
      - name: Create key.properties for signing
        run: |
          echo "Creating key.properties..."
          echo "storePassword=$KEYSTORE_PASSWORD" > android/key.properties
          echo "keyPassword=$KEY_PASSWORD" >> android/key.properties
          echo "keyAlias=$KEY_ALIAS" >> android/key.properties
          echo "storeFile=upload-keystore.jks" >> android/key.properties
        env:
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}

      # Step 7: Build APK
      - name: Build APK for ${{ matrix.flavor }}
        run: |
          flutter build apk --flavor ${{ matrix.flavor }} --obfuscate --split-debug-info=build/debug-info/${{ matrix.flavor }} --release

      # Step 8: Upload build artifacts
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: flutter-build-artifacts-${{ matrix.flavor }}
          path: |
            build/app/outputs/flutter-apk/app-${{ matrix.flavor }}-release.apk
            build/debug-info/${{ matrix.flavor }}
