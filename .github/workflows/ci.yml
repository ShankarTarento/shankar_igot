name: generate-iGOT-build
on:
  workflow_dispatch:

jobs:
  build:
    runs-on: self-hosted
    strategy:
      matrix:
        flavor: [qa]

    steps:
      - name: Debug initial environment
        run: |
          echo "=== Initial Debug ==="
          echo "Current directory: $(pwd)"
          echo "User: $(whoami)"
          echo "Home: $HOME"
          echo "Workspace: $GITHUB_WORKSPACE"
          echo "Contents:"
          ls -la
          echo "===================="

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          clean: true

      - name: Debug after checkout
        run: |
          echo "=== After Checkout Debug ==="
          echo "Current directory: $(pwd)"
          echo "Contents:"
          ls -la
          echo "Git status:"
          git status || echo "Not a git repository"
          echo "=========================="

      - name: Setup Flutter PATH
        run: |
          echo "=== Setting up Flutter ==="
          echo "Current PATH: $PATH"
          echo "Flutter location check:"
          ls -la /home/shankarganeshi/Software/flutter_3.27.1/bin/flutter || echo "Flutter binary not found"
          
          export PATH="/home/shankarganeshi/Software/flutter_3.27.1/bin:$PATH"
          echo "PATH=/home/shankarganeshi/Software/flutter_3.27.1/bin:$PATH" >> $GITHUB_ENV
          
          echo "Testing Flutter command:"
          /home/shankarganeshi/Software/flutter_3.27.1/bin/flutter --version || echo "Flutter command failed"
          echo "========================"

      - name: Verify Flutter setup
        run: |
          echo "=== Flutter Verification ==="
          echo "Current PATH: $PATH"
          echo "Which flutter: $(which flutter || echo 'flutter not in PATH')"
          flutter --version || echo "Flutter command not working"
          echo "========================="

      - name: Create .env file for ${{ matrix.flavor }}
        run: |
          echo "=== Creating .env file ==="
          echo "Working directory: $(pwd)"
          echo "Creating .env file for flavor: ${{ matrix.flavor }}..."
          
          if [ "${{ matrix.flavor }}" = "qa" ]; then
            echo "Processing QA secrets..."
            if [ -z "${{ secrets.QA_ENV }}" ]; then
              echo "WARNING: QA_ENV secret is empty or not set"
            else
              echo "${{ secrets.QA_ENV }}" > .env.qa
              cp .env.qa .env
              echo ".env.qa created successfully"
              echo "File size: $(wc -c < .env.qa) bytes"
            fi
          elif [ "${{ matrix.flavor }}" = "uat" ]; then
            echo "${{ secrets.UAT_ENV_FILE }}" > .env.uat
            cp .env.uat .env
          else
            echo "${{ secrets.PROD_ENV_FILE }}" > .env.prod
            cp .env.prod .env
          fi
          
          echo ".env file creation completed."
          echo "Files created:"
          ls -la .env* || echo "No .env files found"

      - name: Generate env.dart for ${{ matrix.flavor }}
        run: |
          echo "=== Generating env.dart ==="
          echo "Current directory: $(pwd)"
          echo "Getting Flutter dependencies..."
          flutter pub get
          echo "Running build_runner..."
          flutter pub run build_runner build --delete-conflicting-outputs
          echo "env.dart generation completed."

      - name: Set up release keystore
        run: |
          echo "=== Setting up keystore ==="
          echo "Creating android/app directory..."
          mkdir -p android/app
          echo "Decoding keystore..."
          echo "${{ secrets.KEY_STORE }}" | base64 --decode > android/app/upload-keystore.jks
          echo "Keystore setup completed:"
          ls -l android/app/

      - name: Create key.properties for signing
        run: |
          echo "=== Creating key.properties ==="
          echo "Creating key.properties file..."
          echo "storePassword=${{ secrets.KEYSTORE_PASSWORD }}" > android/key.properties
          echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> android/key.properties
          echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> android/key.properties
          echo "storeFile=upload-keystore.jks" >> android/key.properties
          echo "key.properties created successfully"

      - name: Build APK for ${{ matrix.flavor }}
        run: |
          echo "=== Building APK ==="
          echo "Current directory: $(pwd)"
          echo "Building APK for flavor: ${{ matrix.flavor }}"
          flutter build apk --flavor ${{ matrix.flavor }} --obfuscate --split-debug-info=build/debug-info/${{ matrix.flavor }} --release
          echo "APK build completed"
          echo "Build outputs:"
          ls -la build/app/outputs/flutter-apk/ || echo "APK output directory not found"

   # NEW: Firebase App Distribution Steps
      - name: Setup Firebase Service Account
        run: |
          echo "=== Setting up Firebase credentials ==="
          echo "${{ secrets.FIREBASE_SERVICE_TOKEN_BASE64 }}" | base64 --decode > firebase-service-account.json
          echo "Firebase service account file created"
          ls -la firebase-service-account.json

      - name: Install Firebase CLI
        run: |
          echo "=== Installing Firebase CLI ==="
          # Check if Firebase CLI is already installed
          if ! command -v firebase &> /dev/null; then
            echo "Installing Firebase CLI..."
            curl -sL https://firebase.tools | bash
          else
            echo "Firebase CLI already installed"
          fi
          firebase --version

      - name: Distribute to Firebase App Distribution
        run: |
          echo "=== Distributing to Firebase ==="
          
          # Set environment variables for Firebase
          export GOOGLE_APPLICATION_CREDENTIALS="firebase-service-account.json"
          
          # Define APK path
          APK_PATH="build/app/outputs/flutter-apk/app-${{ matrix.flavor }}-release.apk"
          
          # Verify APK exists
          if [ ! -f "$APK_PATH" ]; then
            echo "ERROR: APK not found at $APK_PATH"
            ls -la build/app/outputs/flutter-apk/
            exit 1
          fi
          
          echo "Uploading APK: $APK_PATH"
          echo "App ID: ${{ secrets.QA_FIREBASE_APP_ID }}"
          
          # Upload to Firebase App Distribution
          firebase appdistribution:distribute "$APK_PATH" \
            --app "${{ secrets.QA_FIREBASE_APP_ID }}" \
            --groups "${{ 'Dev' }}" \
            --release-notes "Build from GitHub Actions - ${{ matrix.flavor }} flavor - $(date)" \
            --debug
          
          echo "Firebase distribution completed!"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: flutter-build-artifacts-${{ matrix.flavor }}
          path: |
            build/app/outputs/flutter-apk/app-${{ matrix.flavor }}-release.apk
            build/debug-info/${{ matrix.flavor }}
        if: success()

      - name: Cleanup sensitive files
        run: |
          echo "=== Cleaning up ==="
          rm -f firebase-service-account.json
          rm -f android/key.properties
          echo "Cleanup completed"
        if: always()